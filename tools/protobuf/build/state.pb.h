// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state.proto

#ifndef PROTOBUF_state_2eproto__INCLUDED
#define PROTOBUF_state_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "sensor.pb.h"
#include "wheel.pb.h"
#include "specification.pb.h"
// @@protoc_insertion_point(includes)
class State;
class StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;

namespace protobuf_state_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_state_2eproto

// ===================================================================

class State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:State) */ {
 public:
  State();
  virtual ~State();

  State(const State& from);

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const State& default_instance();

  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(State* other);

  // implements Message ----------------------------------------------

  inline State* New() const PROTOBUF_FINAL { return New(NULL); }

  State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Sensor sensor = 1;
  int sensor_size() const;
  void clear_sensor();
  static const int kSensorFieldNumber = 1;
  const ::Sensor& sensor(int index) const;
  ::Sensor* mutable_sensor(int index);
  ::Sensor* add_sensor();
  ::google::protobuf::RepeatedPtrField< ::Sensor >*
      mutable_sensor();
  const ::google::protobuf::RepeatedPtrField< ::Sensor >&
      sensor() const;

  // repeated .Wheel wheel = 2;
  int wheel_size() const;
  void clear_wheel();
  static const int kWheelFieldNumber = 2;
  const ::Wheel& wheel(int index) const;
  ::Wheel* mutable_wheel(int index);
  ::Wheel* add_wheel();
  ::google::protobuf::RepeatedPtrField< ::Wheel >*
      mutable_wheel();
  const ::google::protobuf::RepeatedPtrField< ::Wheel >&
      wheel() const;

  // .Specification specification = 3;
  bool has_specification() const;
  void clear_specification();
  static const int kSpecificationFieldNumber = 3;
  const ::Specification& specification() const;
  ::Specification* mutable_specification();
  ::Specification* release_specification();
  void set_allocated_specification(::Specification* specification);

  // float steer = 4;
  void clear_steer();
  static const int kSteerFieldNumber = 4;
  float steer() const;
  void set_steer(float value);

  // float brakeCmd = 5;
  void clear_brakecmd();
  static const int kBrakeCmdFieldNumber = 5;
  float brakecmd() const;
  void set_brakecmd(float value);

  // float accelCmd = 6;
  void clear_accelcmd();
  static const int kAccelCmdFieldNumber = 6;
  float accelcmd() const;
  void set_accelcmd(float value);

  // @@protoc_insertion_point(class_scope:State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Sensor > sensor_;
  ::google::protobuf::RepeatedPtrField< ::Wheel > wheel_;
  ::Specification* specification_;
  float steer_;
  float brakecmd_;
  float accelcmd_;
  mutable int _cached_size_;
  friend struct protobuf_state_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// State

// repeated .Sensor sensor = 1;
inline int State::sensor_size() const {
  return sensor_.size();
}
inline void State::clear_sensor() {
  sensor_.Clear();
}
inline const ::Sensor& State::sensor(int index) const {
  // @@protoc_insertion_point(field_get:State.sensor)
  return sensor_.Get(index);
}
inline ::Sensor* State::mutable_sensor(int index) {
  // @@protoc_insertion_point(field_mutable:State.sensor)
  return sensor_.Mutable(index);
}
inline ::Sensor* State::add_sensor() {
  // @@protoc_insertion_point(field_add:State.sensor)
  return sensor_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Sensor >*
State::mutable_sensor() {
  // @@protoc_insertion_point(field_mutable_list:State.sensor)
  return &sensor_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Sensor >&
State::sensor() const {
  // @@protoc_insertion_point(field_list:State.sensor)
  return sensor_;
}

// repeated .Wheel wheel = 2;
inline int State::wheel_size() const {
  return wheel_.size();
}
inline void State::clear_wheel() {
  wheel_.Clear();
}
inline const ::Wheel& State::wheel(int index) const {
  // @@protoc_insertion_point(field_get:State.wheel)
  return wheel_.Get(index);
}
inline ::Wheel* State::mutable_wheel(int index) {
  // @@protoc_insertion_point(field_mutable:State.wheel)
  return wheel_.Mutable(index);
}
inline ::Wheel* State::add_wheel() {
  // @@protoc_insertion_point(field_add:State.wheel)
  return wheel_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Wheel >*
State::mutable_wheel() {
  // @@protoc_insertion_point(field_mutable_list:State.wheel)
  return &wheel_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Wheel >&
State::wheel() const {
  // @@protoc_insertion_point(field_list:State.wheel)
  return wheel_;
}

// .Specification specification = 3;
inline bool State::has_specification() const {
  return this != internal_default_instance() && specification_ != NULL;
}
inline void State::clear_specification() {
  if (GetArenaNoVirtual() == NULL && specification_ != NULL) delete specification_;
  specification_ = NULL;
}
inline const ::Specification& State::specification() const {
  // @@protoc_insertion_point(field_get:State.specification)
  return specification_ != NULL ? *specification_
                         : *::Specification::internal_default_instance();
}
inline ::Specification* State::mutable_specification() {
  
  if (specification_ == NULL) {
    specification_ = new ::Specification;
  }
  // @@protoc_insertion_point(field_mutable:State.specification)
  return specification_;
}
inline ::Specification* State::release_specification() {
  // @@protoc_insertion_point(field_release:State.specification)
  
  ::Specification* temp = specification_;
  specification_ = NULL;
  return temp;
}
inline void State::set_allocated_specification(::Specification* specification) {
  delete specification_;
  specification_ = specification;
  if (specification) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:State.specification)
}

// float steer = 4;
inline void State::clear_steer() {
  steer_ = 0;
}
inline float State::steer() const {
  // @@protoc_insertion_point(field_get:State.steer)
  return steer_;
}
inline void State::set_steer(float value) {
  
  steer_ = value;
  // @@protoc_insertion_point(field_set:State.steer)
}

// float brakeCmd = 5;
inline void State::clear_brakecmd() {
  brakecmd_ = 0;
}
inline float State::brakecmd() const {
  // @@protoc_insertion_point(field_get:State.brakeCmd)
  return brakecmd_;
}
inline void State::set_brakecmd(float value) {
  
  brakecmd_ = value;
  // @@protoc_insertion_point(field_set:State.brakeCmd)
}

// float accelCmd = 6;
inline void State::clear_accelcmd() {
  accelcmd_ = 0;
}
inline float State::accelcmd() const {
  // @@protoc_insertion_point(field_get:State.accelCmd)
  return accelcmd_;
}
inline void State::set_accelcmd(float value) {
  
  accelcmd_ = value;
  // @@protoc_insertion_point(field_set:State.accelCmd)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_state_2eproto__INCLUDED
