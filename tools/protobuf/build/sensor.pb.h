// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor.proto

#ifndef PROTOBUF_sensor_2eproto__INCLUDED
#define PROTOBUF_sensor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class Sensor;
class SensorDefaultTypeInternal;
extern SensorDefaultTypeInternal _Sensor_default_instance_;

namespace protobuf_sensor_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_sensor_2eproto

enum Sensor_SensorType {
  Sensor_SensorType_GPS = 0,
  Sensor_SensorType_LASER = 1,
  Sensor_SensorType_Sensor_SensorType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Sensor_SensorType_Sensor_SensorType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Sensor_SensorType_IsValid(int value);
const Sensor_SensorType Sensor_SensorType_SensorType_MIN = Sensor_SensorType_GPS;
const Sensor_SensorType Sensor_SensorType_SensorType_MAX = Sensor_SensorType_LASER;
const int Sensor_SensorType_SensorType_ARRAYSIZE = Sensor_SensorType_SensorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sensor_SensorType_descriptor();
inline const ::std::string& Sensor_SensorType_Name(Sensor_SensorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sensor_SensorType_descriptor(), value);
}
inline bool Sensor_SensorType_Parse(
    const ::std::string& name, Sensor_SensorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sensor_SensorType>(
    Sensor_SensorType_descriptor(), name, value);
}
// ===================================================================

class Sensor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Sensor) */ {
 public:
  Sensor();
  virtual ~Sensor();

  Sensor(const Sensor& from);

  inline Sensor& operator=(const Sensor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sensor& default_instance();

  static inline const Sensor* internal_default_instance() {
    return reinterpret_cast<const Sensor*>(
               &_Sensor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Sensor* other);

  // implements Message ----------------------------------------------

  inline Sensor* New() const PROTOBUF_FINAL { return New(NULL); }

  Sensor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Sensor& from);
  void MergeFrom(const Sensor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Sensor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Sensor_SensorType SensorType;
  static const SensorType GPS =
    Sensor_SensorType_GPS;
  static const SensorType LASER =
    Sensor_SensorType_LASER;
  static inline bool SensorType_IsValid(int value) {
    return Sensor_SensorType_IsValid(value);
  }
  static const SensorType SensorType_MIN =
    Sensor_SensorType_SensorType_MIN;
  static const SensorType SensorType_MAX =
    Sensor_SensorType_SensorType_MAX;
  static const int SensorType_ARRAYSIZE =
    Sensor_SensorType_SensorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SensorType_descriptor() {
    return Sensor_SensorType_descriptor();
  }
  static inline const ::std::string& SensorType_Name(SensorType value) {
    return Sensor_SensorType_Name(value);
  }
  static inline bool SensorType_Parse(const ::std::string& name,
      SensorType* value) {
    return Sensor_SensorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated float value = 2;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_value();

  // .Sensor.SensorType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Sensor_SensorType type() const;
  void set_type(::Sensor_SensorType value);

  // @@protoc_insertion_point(class_scope:Sensor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > value_;
  mutable int _value_cached_byte_size_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_sensor_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Sensor

// .Sensor.SensorType type = 1;
inline void Sensor::clear_type() {
  type_ = 0;
}
inline ::Sensor_SensorType Sensor::type() const {
  // @@protoc_insertion_point(field_get:Sensor.type)
  return static_cast< ::Sensor_SensorType >(type_);
}
inline void Sensor::set_type(::Sensor_SensorType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Sensor.type)
}

// repeated float value = 2;
inline int Sensor::value_size() const {
  return value_.size();
}
inline void Sensor::clear_value() {
  value_.Clear();
}
inline float Sensor::value(int index) const {
  // @@protoc_insertion_point(field_get:Sensor.value)
  return value_.Get(index);
}
inline void Sensor::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:Sensor.value)
}
inline void Sensor::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:Sensor.value)
}
inline const ::google::protobuf::RepeatedField< float >&
Sensor::value() const {
  // @@protoc_insertion_point(field_list:Sensor.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< float >*
Sensor::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:Sensor.value)
  return &value_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Sensor_SensorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Sensor_SensorType>() {
  return ::Sensor_SensorType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sensor_2eproto__INCLUDED
